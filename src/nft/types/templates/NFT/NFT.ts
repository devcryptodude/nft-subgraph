// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Activate extends ethereum.Event {
  get params(): Activate__Params {
    return new Activate__Params(this);
  }
}

export class Activate__Params {
  _event: Activate;

  constructor(event: Activate) {
    this._event = event;
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BioChange extends ethereum.Event {
  get params(): BioChange__Params {
    return new BioChange__Params(this);
  }
}

export class BioChange__Params {
  _event: BioChange;

  constructor(event: BioChange) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get bio(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Deactivate extends ethereum.Event {
  get params(): Deactivate__Params {
    return new Deactivate__Params(this);
  }
}

export class Deactivate__Params {
  _event: Deactivate;

  constructor(event: Deactivate) {
    this._event = event;
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _redemptionCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NameChange extends ethereum.Event {
  get params(): NameChange__Params {
    return new NameChange__Params(this);
  }
}

export class NameChange__Params {
  _event: NameChange;

  constructor(event: NameChange) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newName(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NameReset extends ethereum.Event {
  get params(): NameReset__Params {
    return new NameReset__Params(this);
  }
}

export class NameReset__Params {
  _event: NameReset;

  constructor(event: NameReset) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFT__TokenAttrResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }
}

export class NFT__getRoyaltiesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class NFT__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class NFT extends ethereum.SmartContract {
  static bind(address: Address): NFT {
    return new NFT("NFT", address);
  }

  AttrHashes(param0: Bytes): BigInt {
    let result = super.call("AttrHashes", "AttrHashes(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_AttrHashes(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("AttrHashes", "AttrHashes(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MEFHolder(param0: BigInt): boolean {
    let result = super.call("MEFHolder", "MEFHolder(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_MEFHolder(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("MEFHolder", "MEFHolder(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  TokenAttr(param0: BigInt): NFT__TokenAttrResult {
    let result = super.call(
      "TokenAttr",
      "TokenAttr(uint256):(uint8,uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NFT__TokenAttrResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32()
    );
  }

  try_TokenAttr(param0: BigInt): ethereum.CallResult<NFT__TokenAttrResult> {
    let result = super.tryCall(
      "TokenAttr",
      "TokenAttr(uint256):(uint8,uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFT__TokenAttrResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32()
      )
    );
  }

  balanceMEF(param0: Address): BigInt {
    let result = super.call("balanceMEF", "balanceMEF(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceMEF(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceMEF", "balanceMEF(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bio(param0: BigInt): string {
    let result = super.call("bio", "bio(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_bio(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("bio", "bio(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  bioChangePrice(): BigInt {
    let result = super.call("bioChangePrice", "bioChangePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bioChangePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bioChangePrice",
      "bioChangePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isNameReserved(nameString: string): boolean {
    let result = super.call("isNameReserved", "isNameReserved(string):(bool)", [
      ethereum.Value.fromString(nameString)
    ]);

    return result[0].toBoolean();
  }

  try_isNameReserved(nameString: string): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isNameReserved",
      "isNameReserved(string):(bool)",
      [ethereum.Value.fromString(nameString)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nameChangePrice(): BigInt {
    let result = super.call(
      "nameChangePrice",
      "nameChangePrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nameChangePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nameChangePrice",
      "nameChangePrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pantiesToken(): Address {
    let result = super.call("pantiesToken", "pantiesToken():(address)", []);

    return result[0].toAddress();
  }

  try_pantiesToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("pantiesToken", "pantiesToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionEnabled(): boolean {
    let result = super.call(
      "redemptionEnabled",
      "redemptionEnabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_redemptionEnabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "redemptionEnabled",
      "redemptionEnabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  redemptionEnd(): BigInt {
    let result = super.call("redemptionEnd", "redemptionEnd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_redemptionEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionEnd",
      "redemptionEnd():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  toLower(str: string): string {
    let result = super.call("toLower", "toLower(string):(string)", [
      ethereum.Value.fromString(str)
    ]);

    return result[0].toString();
  }

  try_toLower(str: string): ethereum.CallResult<string> {
    let result = super.tryCall("toLower", "toLower(string):(string)", [
      ethereum.Value.fromString(str)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenBioByIndex(index: BigInt): string {
    let result = super.call(
      "tokenBioByIndex",
      "tokenBioByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toString();
  }

  try_tokenBioByIndex(index: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenBioByIndex",
      "tokenBioByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenNameByIndex(index: BigInt): string {
    let result = super.call(
      "tokenNameByIndex",
      "tokenNameByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toString();
  }

  try_tokenNameByIndex(index: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenNameByIndex",
      "tokenNameByIndex(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  validateName(str: string): boolean {
    let result = super.call("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(str)
    ]);

    return result[0].toBoolean();
  }

  try_validateName(str: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("validateName", "validateName(string):(bool)", [
      ethereum.Value.fromString(str)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBackground(tokenId: BigInt): string {
    let result = super.call(
      "getBackground",
      "getBackground(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_getBackground(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getBackground",
      "getBackground(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getHands(tokenId: BigInt): string {
    let result = super.call("getHands", "getHands(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_getHands(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getHands", "getHands(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getPanties(tokenId: BigInt): string {
    let result = super.call("getPanties", "getPanties(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_getPanties(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getPanties", "getPanties(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getPantiesColor(tokenId: BigInt): string {
    let result = super.call(
      "getPantiesColor",
      "getPantiesColor(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_getPantiesColor(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getPantiesColor",
      "getPantiesColor(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getAccessories(tokenId: BigInt): string {
    let result = super.call(
      "getAccessories",
      "getAccessories(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_getAccessories(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getAccessories",
      "getAccessories(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSubliminal(tokenId: BigInt): string {
    let result = super.call(
      "getSubliminal",
      "getSubliminal(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toString();
  }

  try_getSubliminal(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getSubliminal",
      "getSubliminal(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getStain(tokenId: BigInt): string {
    let result = super.call("getStain", "getStain(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_getStain(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getStain", "getStain(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getnamed(tokenId: BigInt): boolean {
    let result = super.call("getnamed", "getnamed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_getnamed(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("getnamed", "getnamed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getmef(tokenId: BigInt): boolean {
    let result = super.call("getmef", "getmef(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_getmef(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("getmef", "getmef(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadata(_tokenId: BigInt): string {
    let result = super.call("metadata", "metadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_metadata(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("metadata", "metadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC1155Received(
    param0: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155BatchReceived(
    param0: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    from: Address,
    receivedTokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(receivedTokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    from: Address,
    receivedTokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(receivedTokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyalties(param0: BigInt): NFT__getRoyaltiesResult {
    let result = super.call(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NFT__getRoyaltiesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_getRoyalties(
    param0: BigInt
  ): ethereum.CallResult<NFT__getRoyaltiesResult> {
    let result = super.tryCall(
      "getRoyalties",
      "getRoyalties(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFT__getRoyaltiesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getFeeRecipients(param0: BigInt): Array<Address> {
    let result = super.call(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddressArray();
  }

  try_getFeeRecipients(param0: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getFeeBps(param0: BigInt): Array<BigInt> {
    let result = super.call("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigIntArray();
  }

  try_getFeeBps(param0: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  royaltyInfo(param0: BigInt, value: BigInt): NFT__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return new NFT__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    param0: BigInt,
    value: BigInt
  ): ethereum.CallResult<NFT__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFT__royaltyInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get dirtyPantiesAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class EnableRedemptionCall extends ethereum.Call {
  get inputs(): EnableRedemptionCall__Inputs {
    return new EnableRedemptionCall__Inputs(this);
  }

  get outputs(): EnableRedemptionCall__Outputs {
    return new EnableRedemptionCall__Outputs(this);
  }
}

export class EnableRedemptionCall__Inputs {
  _call: EnableRedemptionCall;

  constructor(call: EnableRedemptionCall) {
    this._call = call;
  }

  get end(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EnableRedemptionCall__Outputs {
  _call: EnableRedemptionCall;

  constructor(call: EnableRedemptionCall) {
    this._call = call;
  }
}

export class DisableRedemptionCall extends ethereum.Call {
  get inputs(): DisableRedemptionCall__Inputs {
    return new DisableRedemptionCall__Inputs(this);
  }

  get outputs(): DisableRedemptionCall__Outputs {
    return new DisableRedemptionCall__Outputs(this);
  }
}

export class DisableRedemptionCall__Inputs {
  _call: DisableRedemptionCall;

  constructor(call: DisableRedemptionCall) {
    this._call = call;
  }
}

export class DisableRedemptionCall__Outputs {
  _call: DisableRedemptionCall;

  constructor(call: DisableRedemptionCall) {
    this._call = call;
  }
}

export class SetPrefixURICall extends ethereum.Call {
  get inputs(): SetPrefixURICall__Inputs {
    return new SetPrefixURICall__Inputs(this);
  }

  get outputs(): SetPrefixURICall__Outputs {
    return new SetPrefixURICall__Outputs(this);
  }
}

export class SetPrefixURICall__Inputs {
  _call: SetPrefixURICall;

  constructor(call: SetPrefixURICall) {
    this._call = call;
  }

  get uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetPrefixURICall__Outputs {
  _call: SetPrefixURICall;

  constructor(call: SetPrefixURICall) {
    this._call = call;
  }
}

export class RecoverERC721Call extends ethereum.Call {
  get inputs(): RecoverERC721Call__Inputs {
    return new RecoverERC721Call__Inputs(this);
  }

  get outputs(): RecoverERC721Call__Outputs {
    return new RecoverERC721Call__Outputs(this);
  }
}

export class RecoverERC721Call__Inputs {
  _call: RecoverERC721Call;

  constructor(call: RecoverERC721Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destination(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class RecoverERC721Call__Outputs {
  _call: RecoverERC721Call;

  constructor(call: RecoverERC721Call) {
    this._call = call;
  }
}

export class UpdateERC1155BurnAddressCall extends ethereum.Call {
  get inputs(): UpdateERC1155BurnAddressCall__Inputs {
    return new UpdateERC1155BurnAddressCall__Inputs(this);
  }

  get outputs(): UpdateERC1155BurnAddressCall__Outputs {
    return new UpdateERC1155BurnAddressCall__Outputs(this);
  }
}

export class UpdateERC1155BurnAddressCall__Inputs {
  _call: UpdateERC1155BurnAddressCall;

  constructor(call: UpdateERC1155BurnAddressCall) {
    this._call = call;
  }

  get erc1155BurnAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateERC1155BurnAddressCall__Outputs {
  _call: UpdateERC1155BurnAddressCall;

  constructor(call: UpdateERC1155BurnAddressCall) {
    this._call = call;
  }
}

export class UpdateERC721BurnAddressCall extends ethereum.Call {
  get inputs(): UpdateERC721BurnAddressCall__Inputs {
    return new UpdateERC721BurnAddressCall__Inputs(this);
  }

  get outputs(): UpdateERC721BurnAddressCall__Outputs {
    return new UpdateERC721BurnAddressCall__Outputs(this);
  }
}

export class UpdateERC721BurnAddressCall__Inputs {
  _call: UpdateERC721BurnAddressCall;

  constructor(call: UpdateERC721BurnAddressCall) {
    this._call = call;
  }

  get erc721BurnAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateERC721BurnAddressCall__Outputs {
  _call: UpdateERC721BurnAddressCall;

  constructor(call: UpdateERC721BurnAddressCall) {
    this._call = call;
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receivedTokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetPantiesTokenCall extends ethereum.Call {
  get inputs(): SetPantiesTokenCall__Inputs {
    return new SetPantiesTokenCall__Inputs(this);
  }

  get outputs(): SetPantiesTokenCall__Outputs {
    return new SetPantiesTokenCall__Outputs(this);
  }
}

export class SetPantiesTokenCall__Inputs {
  _call: SetPantiesTokenCall;

  constructor(call: SetPantiesTokenCall) {
    this._call = call;
  }

  get _panties(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPantiesTokenCall__Outputs {
  _call: SetPantiesTokenCall;

  constructor(call: SetPantiesTokenCall) {
    this._call = call;
  }
}

export class ChangeNamePriceCall extends ethereum.Call {
  get inputs(): ChangeNamePriceCall__Inputs {
    return new ChangeNamePriceCall__Inputs(this);
  }

  get outputs(): ChangeNamePriceCall__Outputs {
    return new ChangeNamePriceCall__Outputs(this);
  }
}

export class ChangeNamePriceCall__Inputs {
  _call: ChangeNamePriceCall;

  constructor(call: ChangeNamePriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeNamePriceCall__Outputs {
  _call: ChangeNamePriceCall;

  constructor(call: ChangeNamePriceCall) {
    this._call = call;
  }
}

export class BioNamePriceCall extends ethereum.Call {
  get inputs(): BioNamePriceCall__Inputs {
    return new BioNamePriceCall__Inputs(this);
  }

  get outputs(): BioNamePriceCall__Outputs {
    return new BioNamePriceCall__Outputs(this);
  }
}

export class BioNamePriceCall__Inputs {
  _call: BioNamePriceCall;

  constructor(call: BioNamePriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BioNamePriceCall__Outputs {
  _call: BioNamePriceCall;

  constructor(call: BioNamePriceCall) {
    this._call = call;
  }
}

export class ChangeNameCall extends ethereum.Call {
  get inputs(): ChangeNameCall__Inputs {
    return new ChangeNameCall__Inputs(this);
  }

  get outputs(): ChangeNameCall__Outputs {
    return new ChangeNameCall__Outputs(this);
  }
}

export class ChangeNameCall__Inputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newName(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeNameCall__Outputs {
  _call: ChangeNameCall;

  constructor(call: ChangeNameCall) {
    this._call = call;
  }
}

export class ChangeBioCall extends ethereum.Call {
  get inputs(): ChangeBioCall__Inputs {
    return new ChangeBioCall__Inputs(this);
  }

  get outputs(): ChangeBioCall__Outputs {
    return new ChangeBioCall__Outputs(this);
  }
}

export class ChangeBioCall__Inputs {
  _call: ChangeBioCall;

  constructor(call: ChangeBioCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get bio(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ChangeBioCall__Outputs {
  _call: ChangeBioCall;

  constructor(call: ChangeBioCall) {
    this._call = call;
  }
}

export class ResetNameCall extends ethereum.Call {
  get inputs(): ResetNameCall__Inputs {
    return new ResetNameCall__Inputs(this);
  }

  get outputs(): ResetNameCall__Outputs {
    return new ResetNameCall__Outputs(this);
  }
}

export class ResetNameCall__Inputs {
  _call: ResetNameCall;

  constructor(call: ResetNameCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ResetNameCall__Outputs {
  _call: ResetNameCall;

  constructor(call: ResetNameCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class UpdateRoyaltiesCall extends ethereum.Call {
  get inputs(): UpdateRoyaltiesCall__Inputs {
    return new UpdateRoyaltiesCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltiesCall__Outputs {
    return new UpdateRoyaltiesCall__Outputs(this);
  }
}

export class UpdateRoyaltiesCall__Inputs {
  _call: UpdateRoyaltiesCall;

  constructor(call: UpdateRoyaltiesCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateRoyaltiesCall__Outputs {
  _call: UpdateRoyaltiesCall;

  constructor(call: UpdateRoyaltiesCall) {
    this._call = call;
  }
}
